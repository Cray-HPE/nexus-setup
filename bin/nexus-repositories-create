#!/usr/bin/env bash

# Copyright 2022 Hewlett Packard Enterprise Development LP

command -v yq >/dev/null 2>&1 || { echo >&2 "command not found: yq"; exit 1; }

. "$(command -v nexus-ready)"

WORKDIR="$(mktemp -d)"
trap "{ rm -rf '$WORKDIR'; }" EXIT

function find_repo(){
    # If changes are needed, ensure that testing is done on both Nexus 3.25.0 (csm-1.2) and
    # 3.38.0 (csm-1.3) since this is used in both versions.
    if [[ $# -ne 3 ]]; then
        echo -n >&2 "Missing argumentss. Expecting repo_format repo_type repo_name. Args passed were: $@"
        return 1
    fi
    if [[ -z "$1" ]]; then echo -n >&2 "Empty repo_format arg."; return 1; fi
    if [[ -z "$2" ]]; then echo -n >&2 "Empty repo_type arg."; return 1; fi
    if [[ -z "$3" ]]; then echo -n >&2 "Empty repo_name arg."; return 1; fi
    repo_format=$1
    repo_type=$2
    repo_name=$3

    echo -n >&2 "Looking for ${repo_format}/${repo_type} repository: ${repo_name}..."

    # Ask Nexus for all repositories and filter that result by by format, type, and name.
    jqfilter=".[] | select(.format == \"$repo_format\") | select(.type == \"$repo_type\") | select(.name == \"$repo_name\")"
    result=$(curl -sfk "${URL}/v1/repositories" | jq "$jqfilter")

    # An empty string here means that the repo was not found in the json result by format, type, and name.
    if [[ -z "$result" ]]; then
      echo -n >&2 " NOT found..."
      return 1
    else
      echo -n >&2 " Found..."
      return 0
    fi
}

while [[ $# -gt 0 ]]; do
    nrepos=$(yq r -d '*' -X -c -l "$1")

    for (( i=0; i<nrepos; i++ )); do
        tmpfile="${WORKDIR}/repository-${#}-${i}.yaml"
        yq r -d $i -X --stripComments "$1" > "$tmpfile"

        repo_name="$(yq r "$tmpfile" 'name')"
        repo_format="$(yq r "$tmpfile" 'format')"
        repo_type="$(yq r "$tmpfile" 'type')"

        find_repo ${repo_format} ${repo_type} ${repo_name}
        found=$?

        if [[ $found -eq 1 ]]; then
            # Repo was not found, try to create it.
            # Don't call ceate on an existing repo (CASMINST-5136).
            echo -n >&2 "Creating ${repo_format}/${repo_type} repository: ${repo_name}..."
            yq r -j "$tmpfile" | curl -sfk -w "%{http_code}" \
                --retry-connrefused \
                --retry "${CURL_RETRY:-36}" \
                --retry-delay "${CURL_RETRY_DELAY:-5}" \
                --max-time "${CURL_MAX_TIME:-180}" \
                -X POST "${URL}/beta/repositories/${repo_format}/${repo_type}" \
                -H "Content-Type: application/json" \
                -d @-
            status=$?
            if [[ $status -eq 0 ]]; then
                echo >&2 " OK created"
            else
                echo >&2 " FAIL"; exit $status;
            fi
        elif [[ $found -eq 0 ]]; then
            # Found the repo, try to update it.
            echo -n >&2 "Updating ${repo_format}/${repo_type} repository: ${repo_name}..."
            yq r -j "$tmpfile" | curl -sfk -w "%{http_code}" \
                --retry-connrefused \
                --retry "${CURL_RETRY:-36}" \
                --retry-delay "${CURL_RETRY_DELAY:-5}" \
                --max-time "${CURL_MAX_TIME:-180}" \
                -X PUT "${URL}/beta/repositories/${repo_format}/${repo_type}/${repo_name}" \
                -H "Content-Type: application/json" \
                -d @-
            status=$?
            if [[ $status -eq 0 ]]; then
                echo >&2 " OK updated"
            else
                echo >&2 " FAIL"; exit $status;
            fi
        else
            # We did not get a known response from the search API.
            echo >&2 " FAIL due to unexpected http response $http_status"; exit 1
        fi
    done

    shift
done

