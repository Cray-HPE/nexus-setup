#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

SCRIPT_DIR=$(dirname "${BASH_SOURCE}")

usage(){
    echo "Usage: $0 JSON_IUF_HELM_META"
    echo "Uploads Helm chart(s) from the location(s) given by the JSON_RPM_HELM_META structure to the Nexus registry."
    exit 0 # Without error since the parameter may not have been included.
}

# Store results in this file.
RESULTS_FILE="/results/records.yaml"
RESULTS_HEADER_FILE=$(mktemp)
mkdir -p "$(dirname "$RESULTS_FILE")"
cat << EOF > "$RESULTS_HEADER_FILE"
component_versions:
  helm:
EOF

# Ensure we have written something to the output file when we exit
trap 'ensure-results-file-exists $RESULTS_FILE' EXIT

# usage: record_result CHART_NAME CHART_VERSION
#
# Writes part of the results to the $RESULTS_FILE.
#
function record_result(){
    # append records for a single repository to the results file.
    chart_name="$1"
    chart_version="$2"
    # Create results file when recording the first result.
    if [[ ! -f "$RESULTS_FILE" ]]; then
        mv "$RESULTS_HEADER_FILE" "$RESULTS_FILE"
    fi
    echo "  - name: '${chart_name}'" >> "$RESULTS_FILE"
    echo "    version: '${chart_version}'" >> "$RESULTS_FILE"
}

# usage: get_chart_yaml CHART_PATH
#
# Given a path to a compressed/archived helm chart, get a temporary
# path to the Chart.yaml file.
#
function get_chart_yaml(){
    chart_path="$1"
    extracted_location="$(mktemp -d)"
    tar -xzf "$chart_path" -C "$extracted_location"
    # There should only be one expanded Chart.yaml path based on
    # how the compressed charts are structured.
    chart_yaml_files=("${extracted_location}"/*/Chart.yaml)
    echo "DEBUG Helm chart file is: ${chart_yaml_files[0]}"
}

# usage: get_chart_name CHART_YAML_PATH
#
# Given a path to a helm chart's Chart.yaml file, get the chart's name
#
function get_chart_name(){
    chart_yaml_file="$1"
    chart_name=$(yq r "${chart_yaml_file}" "name")
    echo "DEBUG Helm chart name for file: ${chart_yaml_file} is ${chart_name}"
}

# usage: get_chart_version CHART_YAML_PATH
#
# Given a path to a helm chart's Chart.yaml file, get the chart's version
#
function get_chart_version(){
    chart_yaml_file="$1"
    chart_version=$(yq r "${chart_yaml_file}" "version")
    echo "DEBUG Chart version for file: ${chart_yaml_file} is ${chart_version}"
}


# usage: process HELM_PATH
#
# Uploads the contents in the Helm directory at HELM_PATH to the Nexus chart repositry.
#
# The following arguments are required:
#
#   HELM_PATH - The directory from which Nexus will source Helm data for loading into the chart repository.
#   HELM_REPO - The Helm chart repositry in Nexus.
#
# Requires the following environment variables to be set:
#
#   NEXUS_REGISTRY - Hostname of Nexus registry; defaults to registry.local
#   NEXUS_USERNAME - The Nexus admin user name.
#   NEXUS_PASSWORD - The Nexus admin password.

process(){
    helm_path="/product/$1"
    helm_repo="$2"

    if [[ ! -d "$helm_path" ]]; then
        echo "ERROR $0: Invalid directory $helm_path. Skipping the Helm upload operation for $helm_path"
        return 1
    fi

    # Each file under the Helm path will be processed individually and logged. For each file:
    # If the chart repo did not exist, a 404 will be logged. It is expected that the repository
    # was created earlier.
    # If the chart did not exist, a 204 (created) will be logged.
    # If the chart exists already, a 400 will be logged.
    if $SCRIPT_DIR/nexus-upload-repo-helm "$helm_path" "$helm_repo"; then
        # For each chart on $helm_path, get its name and version, and
        # add it to the results file.
        find "$helm_path" -name "*.tgz" | while read -r chart_path; do
            chart_yaml_path=$(get_chart_yaml "$chart_path")
            chart_name=$(get_chart_name "$chart_yaml_path")
            chart_version=$(get_chart_version "$chart_yaml_path")
            echo "DEBUG Adding entry in 'records.yaml' file for chart: ${chart_name} with version ${chart_version}"
            record_result "$chart_name" "$chart_version"
        done
    else
       return 1
    fi

}

# When called by Argo, this is the one expected argument with the content from
# the manifest.
if [[ $# -eq 0 ]]; then
    echo "Error Helm context not passed from the IUF manifest. Skipping running the 'iuf-helm-upload' script"
    usage
fi

# Although the manifest data is yaml, it is passed in json format from Argo
# in this context.
json_helm_context="$1"
helm_dirs=$(echo "$json_helm_context" | jq '.helm | length')
if [[ -z "$helm_dirs" ]]; then
    echo "ERROR Helm directory context not received from IUF. Exiting"
    exit 0
fi

err=0
for (( i=0; i<${helm_dirs}; i++ ));
do
    helm_path=$(echo "$json_helm_context" | jq -r '.helm['$i'].path')
    echo "DEBUG Processing Helm content at: $helm_path"
    # At present, we have one 'charts' Helm repository defined in Nexus. That repository is
    # shared by all products. Should that change, the IUF manifest schema may want to include
    # a chart repository name. For now, we provide the chart repo name here.
    process "$helm_path" "charts"
    # Attempt to process all of the supplied Helm directories. Exit at the end with non-zero
    # if any errors are detected. The Argo log will therefore have all errors associated with
    # this operation for review.
    rc=$?
    if [ $rc -ne 0 ]; then
        err=1
    fi
done

if [ $err -eq 0]; then
    echo "INFO 'iuf-helm-upload' script completed successfully with Helm directory context "$json_helm_context""
else
    echo "ERROR 'iuf-helm-upload' script failed with Helm directory context directory"$json_helm_context""
fi  
exit $err
