#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

SCRIPT_DIR=$(dirname "${BASH_SOURCE}")

usage(){
    echo "Usage: $0 JSON_IUF_RPM_META"
    echo "Uploads RPM(s) from the location(s) given by the JSON_RPM_DOCKER_META structure to the Nexus registry."
    exit 0 # Without error since the parameter may not have been included.
}

# usage: process REPO_PATH REPO_NAME REPO_TYPE 
#
# Uploads the RPM directory at REPO_PATH to the Nexus registry.
#
# The following arguments are required:
#
#   REPO_PATH - The directory from which Nexus will source RPM data creating the RPM in the repository.
#   REPO_NAME - The name of the Nexus repository (must have been created earlier by iuf-nexus-setup). 
#   REPO_TYPE - The Nexus repository type. Supported types are 'yum' and 'raw' (case insensitive).
#
# Requires the following environment variables to be set:
#
#   NEXUS_REGISTRY - Hostname of Nexus registry; defaults to registry.local
#   NEXUS_USERNAME - The Nexus admin user name.
#   NEXUS_PASSWORD - The Nexus admin password.

process(){
    repo_path="/images/$1"
    repo_type="$2"
    repo_name="$3"
    if [[ ! -d "$repo_path" ]]; then
        echo "$0: Invalid directory $repo_path"
        echo "Skipping the RPM upload operation for $repo_path"
        return 1
    fi

    if [[ -z "$repo_type" ]]; then
        echo "Found empty repo_type"
        echo "Skipping the RPM upload operation for $repo_path"
        return 1
    elif [[ "${repo_type,,}" == "null" ]]; then # jq will assign "null" is the element is missing
        echo "It appears that repo_type is missing."
        echo "Skipping the RPM upload operation for $repo_path"
        return 1
    fi

    if [[ -z "$repo_name" ]]; then
        echo "Found empty repo_name"
        echo "Skipping the RPM upload operation for $repo_path"
        return 1
    elif [[ "${repo_name,,}" == "null" ]]; then # jq will assign "null" is the element is missing
        echo "It appears that repo_name is missing."
        echo "Skipping the RPM upload operation for $repo_path"
        return 1
    fi

    # Each file under the repo path will be processed individually and logged. For each file:
    # If the repository did not exist, a 404 will be logged. It is expected that the repository
    # was created earlier by iuf-nexus-setup.
    # If the file did not exist, a 204 (created) will be logged.
    # If the item exists already, a 400 will be logged.
    if [[ "${repo_type,,}" == "raw" ]]; then
        # This will load type 'raw' RPM content from the directory at $repo_path into
        # the repository $repo_name.
        $SCRIPT_DIR/nexus-upload-repo-raw "$repo_path" "$repo_name"
    elif [[ "${repo_type,,}" == "yum" ]]; then
        # This will load type 'yum' RPM content from the directory at $repo_path into
        # the repository $repo_name.
        $SCRIPT_DIR/nexus-upload-repo-yum "$repo_path" "$repo_name"
    else
        echo "Received unsupported repo_type of ${repo_type,,} for $repo_path"
        echo "Skipping the RPM upload operation for $repo_path"
        return 1
    fi
}

# When called by Argo, this is the one expected argument with the content from
# the manifest.
if [[ $# -eq 0 ]]; then
    echo "Did not find RPM context in the IUF manifest."
    echo "Skipping this operation."
    usage
fi

# Although the manifest data is yaml, it is passed in json format from Argo
# in this context.
json_rpm_context="$1"
rpm_dirs=$(echo "$json_rpm_context" | jq '.rpms | length')
if [[ -z "$rpm_dirs" ]]; then
    echo "Did not receive any RPM directory context."
    exit 0
fi

err=0
for (( i=0; i<${rpm_dirs}; i++ ));
do
    repo_path=$(echo "$json_rpm_context" | jq -r '.rpms['$i'].path')
    repo_name=$(echo "$json_rpm_context" | jq -r '.rpms['$i'].repository_name')
    repo_type=$(echo "$json_rpm_context" | jq -r '.rpms['$i'].repository_type')
    echo "Processing RPM content at $repo_path (repo_name=$repo_name repo_type=$repo_type)"
    process "$repo_path" "$repo_type" "$repo_name"
    # Attempt to process all of the repositories. Exit at the end with non-zero if any
    # errors are detected. The Argo log will therefore have all errors associated with
    # this operation for review. 
    rc=$?
    if [ $rc -ne 0 ]; then
        err=1
    fi
done
exit $err
