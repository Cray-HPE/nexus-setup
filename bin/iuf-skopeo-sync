#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

shopt -s extglob

usage(){
    echo "Usage: $0 JSON_IUF_DOCKER_META"
    echo "Uploads container images from the location(s) given by the JSON_IUF_DOCKER_META structure to the Nexus registry."
    exit 0 # Without error since the parameter may not have been included.
}

# Store results in this file.
RESULTS_FILE="/results/records.yaml"
RESULTS_HEADER_FILE=$(mktemp)
mkdir -p "$(dirname "$RESULTS_FILE")"
cat << EOF > "$RESULTS_HEADER_FILE"
component_versions:
  docker:
EOF

# Ensure we have written something to the output file when we exit
trap 'ensure-results-file-exists $RESULTS_FILE' EXIT

# usage: process DIRECTORY
#
# Uploads a DIRECTORY of container images to the Nexus registry.
#
# Requires the following environment variables to be set:
#
#   NEXUS_REGISTRY - Hostname of Nexus registry; defaults to registry.local
#   NEXUS_USERNAME - The Nexus admin user name.
#   NEXUS_PASSWORD - The Nexus admin password.
#
process(){
    docker_dir="$1"
    if [[ ! -d "/images/$docker_dir" ]]; then
        echo "$0: Invalid directory $src"
        echo "Skipping the skopeo sync operation for $docker_dir"
        return 1
    fi

    # Ensure $docker_dir ends with exactly one slash
    docker_dir="${docker_dir%%+(/)}/"

    if skopeo sync --scoped \
        --src dir --dest docker \
        --dest-creds "${NEXUS_USERNAME:-admin}:${NEXUS_PASSWORD}" \
        --dest-tls-verify=false \
        /images/"$docker_dir" "${NEXUS_REGISTRY:-registry.local}"; then

        # Record results for each image. Note that we have to search the directory for
        # things that appear to be docker images here, which unfortunately is not directly
        # looking at the result of the `skopeo sync` command.
        find "/images/$docker_dir" -name "manifest.json" | while read -r manifest_file; do
            # Get the path to the image relative to the specified $docker_dir, as that
            # is the name of the image that was uploaded. For example, if images are found
            # in /images/docker/cray/IMAGE:VERSION and $docker_dir is 'docker/', images were
            # uploaded as "cray/IMAGE:VERSION".
            relative_manifest_path="${manifest_file##/images/${docker_dir}}"
            image_dir="$(dirname "$relative_manifest_path")"
            image_name="$(cut -d":" -f 1 <<< "$image_dir")"
            image_version="$(cut -d":" -f 2 <<< "$image_dir")"
            echo "INFO recording results for ${image_name}:${image_version}"
            record_result "$image_name" "$image_version"
        done
    else
        return 1
    fi
}

# usage: record_result IMAGE_NAME IMAGE_VERSION
#
# Writes part of the results to the $RESULTS_FILE.
#
function record_result(){
    # append records for a single repository to the results file.
    image_name="$1"
    image_version="$2"
    # Create results file when recording the first result.
    if [[ ! -f "$RESULTS_FILE" ]]; then
        mv "$RESULTS_HEADER_FILE" "$RESULTS_FILE"
    fi
    echo "  - name: '${image_name}'" >> "$RESULTS_FILE"
    echo "    version: '${image_version}'" >> "$RESULTS_FILE"
}


if [[ $# -eq 0 ]]; then
    echo "Missing docker context from the IUF manifest."
    echo "Skipping this operation."
    usage
fi

# Although the manifest data is yaml, it is passed in json format from Argo
# in this context.
json_docker_context="$1"
docker_dirs=$(echo "$json_docker_context" | jq '.docker | length')
if [[ -z "$docker_dirs" ]]; then
    echo "Did not receive any docker directory context."
    exit 0
fi

exit_code=0
for (( i=0; i<${docker_dirs}; i++ ));
do
    path=$(echo "$json_docker_context" | jq -r '.docker['$i'].path')
    echo "Processing docker images at $path"
    if ! process "$path"; then
        exit_code=1
    fi
done

echo "Exit code is ${exit_code}"
exit $exit_code
